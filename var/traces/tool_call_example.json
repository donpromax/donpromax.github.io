{
  "files": {
    "tool_call_example.py": "import json\nfrom openai import OpenAI\nfrom execute_util import text\n\nTOOLS = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_temperature\",\n            \"description\": \"Get current temperature at a location.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": 'The location to get the temperature for, in the format \"City, State, Country\".',\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": 'The unit to return the temperature in. Defaults to \"celsius\".',\n                    },\n                },\n                \"required\": [\"location\"],\n            },\n        },\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_temperature_date\",\n            \"description\": \"Get temperature at a location and date.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": 'The location to get the temperature for, in the format \"City, State, Country\".',\n                    },\n                    \"date\": {\n                        \"type\": \"string\",\n                        \"description\": 'The date to get the temperature for, in the format \"Year-Month-Day\".',\n                    },\n                    \"unit\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": 'The unit to return the temperature in. Defaults to \"celsius\".',\n                    },\n                },\n                \"required\": [\"location\", \"date\"],\n            },\n        },\n    },\n]\n\n\ndef main():\n    text(\"## First start the vLLM server\")\n    text(\"pip install jinja2 -U\")\n    text(\"vllm serve /sllmworkspace/share/sllmworks/model/Qwen3-8B --enable-auto-tool-choice --tool-call-parser hermes --reasoning-parser deepseek_r1\")\n    text(\"## Then initialize the client\")\n    messages = [\n        {\"role\": \"user\",  \"content\": \"What's the temperature in San Francisco now? How about tomorrow? Current Date: 2024-09-30.\"},\n    ]\n    openai_api_key = \"EMPTY\"\n    openai_api_base = \"http://localhost:8000/v1\"\n\n    client = OpenAI(\n        api_key=openai_api_key,\n        base_url=openai_api_base,\n    )\n\n    text(\"## Call client with tools description\")\n\n    response = call_client(client, messages, TOOLS) # @inspect response\n\n    messages.append(response.choices[0].message.model_dump()) # @inspect messages\n\n    text(\"## Call tools\")\n\n    messages = add_tool_results(messages) # @inspect messages\n\n    text(\"## Call client with tool call results\")\n\n    response = call_client(client, messages, TOOLS)\n\n    result = response.choices[0].message.content # @inspect result\n\n    print(result)\n\ndef call_client(client, messages, tools):\n    return client.chat.completions.create(\n        model=client.models.list().data[0].id,\n        messages=messages,\n        tools=tools,\n        temperature=0.7,\n        top_p=0.8,\n        max_tokens=512,\n        extra_body={\n            \"repetition_penalty\": 1.05,\n        },\n    )\n\ndef add_tool_results(messages):\n    if tool_calls := messages[-1].get(\"tool_calls\", None):\n        for tool_call in tool_calls:\n            call_id: str = tool_call[\"id\"]\n            if fn_call := tool_call.get(\"function\"):\n                fn_name: str = fn_call[\"name\"]\n                fn_args: dict = json.loads(fn_call[\"arguments\"])\n            \n                fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))\n\n                messages.append({\n                    \"role\": \"tool\",\n                    \"content\": fn_res,\n                    \"tool_call_id\": call_id,\n                })\n    return messages\n\ndef get_current_temperature(location: str, unit: str = \"celsius\"):\n    \"\"\"Get current temperature at a location.\n\n    Args:\n        location: The location to get the temperature for, in the format \"City, State, Country\".\n        unit: The unit to return the temperature in. Defaults to \"celsius\". (choices: [\"celsius\", \"fahrenheit\"])\n\n    Returns:\n        the temperature, the location, and the unit in a dict\n    \"\"\"\n    return {\n        \"temperature\": 26.1,\n        \"location\": location,\n        \"unit\": unit,\n    }\n\n\ndef get_temperature_date(location: str, date: str, unit: str = \"celsius\"):\n    \"\"\"Get temperature at a location and date.\n\n    Args:\n        location: The location to get the temperature for, in the format \"City, State, Country\".\n        date: The date to get the temperature for, in the format \"Year-Month-Day\".\n        unit: The unit to return the temperature in. Defaults to \"celsius\". (choices: [\"celsius\", \"fahrenheit\"])\n\n    Returns:\n        the temperature, the location, the date and the unit in a dict\n    \"\"\"\n    return {\n        \"temperature\": 25.9,\n        \"location\": location,\n        \"date\": date,\n        \"unit\": unit,\n    }\n\n\ndef get_function_by_name(name):\n    if name == \"get_current_temperature\":\n        return get_current_temperature\n    if name == \"get_temperature_date\":\n        return get_temperature_date\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "steps": [
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 57,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 58,
          "function_name": "main",
          "code": "text(\"## First start the vLLM server\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## First start the vLLM server",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 59,
          "function_name": "main",
          "code": "text(\"pip install jinja2 -U\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "pip install jinja2 -U",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 60,
          "function_name": "main",
          "code": "text(\"vllm serve /sllmworkspace/share/sllmworks/model/Qwen3-8B --enable-auto-tool-choice --tool-call-parser hermes --reasoning-parser deepseek_r1\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "vllm serve /sllmworkspace/share/sllmworks/model/Qwen3-8B --enable-auto-tool-choice --tool-call-parser hermes --reasoning-parser deepseek_r1",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 61,
          "function_name": "main",
          "code": "text(\"## Then initialize the client\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Then initialize the client",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 63,
          "function_name": "main",
          "code": "{\"role\": \"user\",  \"content\": \"What's the temperature in San Francisco now? How about tomorrow? Current Date: 2024-09-30.\"},"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 62,
          "function_name": "main",
          "code": "messages = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 65,
          "function_name": "main",
          "code": "openai_api_key = \"EMPTY\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 66,
          "function_name": "main",
          "code": "openai_api_base = \"http://localhost:8000/v1\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 68,
          "function_name": "main",
          "code": "client = OpenAI("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 69,
          "function_name": "main",
          "code": "api_key=openai_api_key,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 70,
          "function_name": "main",
          "code": "base_url=openai_api_base,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 68,
          "function_name": "main",
          "code": "client = OpenAI("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 73,
          "function_name": "main",
          "code": "text(\"## Call client with tools description\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Call client with tools description",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 91,
          "function_name": "call_client",
          "code": "def call_client(client, messages, tools):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 92,
          "function_name": "call_client",
          "code": "return client.chat.completions.create("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 93,
          "function_name": "call_client",
          "code": "model=client.models.list().data[0].id,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 94,
          "function_name": "call_client",
          "code": "messages=messages,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 95,
          "function_name": "call_client",
          "code": "tools=tools,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 96,
          "function_name": "call_client",
          "code": "temperature=0.7,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 97,
          "function_name": "call_client",
          "code": "top_p=0.8,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 98,
          "function_name": "call_client",
          "code": "max_tokens=512,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 100,
          "function_name": "call_client",
          "code": "\"repetition_penalty\": 1.05,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 99,
          "function_name": "call_client",
          "code": "extra_body={"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 92,
          "function_name": "call_client",
          "code": "return client.chat.completions.create("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 75,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS) # @inspect response"
        }
      ],
      "env": {
        "response": "ChatCompletion(id='chatcmpl-059814443219488ea5193d3f3c0ccef1', choices=[Choice(finish_reason='tool_calls', index=0, logprobs=None, message=ChatCompletionMessage(content=\"<think>\\nOkay, let's tackle this user query. The user is asking for the temperature in San Francisco now and tomorrow. The current date given is 2024-09-30.\\n\\nFirst, I need to figure out which functions to use. The tools provided are get_current_temperature and get_temperature_date. The first part of the question is about the current temperature, so that's get_current_temperature. The second part is about tomorrow's temperature, which would be the get_temperature_date function since it requires a date.\\n\\nFor the current temperature, the location is San Francisco. The function requires the location parameter, and the unit is optional, defaulting to Celsius. The user didn't specify a unit, so I'll go with Celsius.\\n\\nFor tomorrow's date, the current date is 2024-09-30, so tomorrow would be 2024-10-01. Again, the location is San Francisco, and the unit is the same as before, Celsius. I need to make sure the date is in the correct format: Year-Month-Day.\\n\\nWait, the user might be in a time zone where the current date is different, but since the current date is provided as 2024-09-30, I should use that to calculate tomorrow's date. So adding one day to 2024-09-30 gives 2024-10-01.\\n\\nI need to make two separate function calls. First, call get_current_temperature with San Francisco. Then, call get_temperature_date with San Francisco and the date 2024-10-01. Both times, the unit is Celsius unless specified otherwise, which it isn't here.\\n\\nDouble-checking the parameters: location is required for both functions. The date is only required for get_temperature_date. The unit is optional in both. So everything looks good. Time to structure the tool calls accordingly.\\n</think>\\n\\n\", refusal=None, role='assistant', annotations=None, audio=None, function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='chatcmpl-tool-4f4be2b6da904661913a3c9e660d023c', function=Function(arguments='{\"location\": \"San Francisco, California, USA\"}', name='get_current_temperature'), type='function'), ChatCompletionMessageToolCall(id='chatcmpl-tool-4c961ea76206449b98d559a6d85297cb', function=Function(arguments='{\"location\": \"San Francisco, California, USA\", \"date\": \"2024-10-01\", \"unit\": \"celsius\"}', name='get_temperature_date'), type='function')], reasoning_content=None), stop_reason=None)], created=1758519843, model='/sllmworkspace/share/sllmworks/model/Qwen3-8B', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=481, prompt_tokens=396, total_tokens=877, completion_tokens_details=None, prompt_tokens_details=None), prompt_logprobs=None)"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 77,
          "function_name": "main",
          "code": "messages.append(response.choices[0].message.model_dump()) # @inspect messages"
        }
      ],
      "env": {
        "messages": [
          {
            "role": "user",
            "content": "What's the temperature in San Francisco now? How about tomorrow? Current Date: 2024-09-30."
          },
          {
            "content": "<think>\nOkay, let's tackle this user query. The user is asking for the temperature in San Francisco now and tomorrow. The current date given is 2024-09-30.\n\nFirst, I need to figure out which functions to use. The tools provided are get_current_temperature and get_temperature_date. The first part of the question is about the current temperature, so that's get_current_temperature. The second part is about tomorrow's temperature, which would be the get_temperature_date function since it requires a date.\n\nFor the current temperature, the location is San Francisco. The function requires the location parameter, and the unit is optional, defaulting to Celsius. The user didn't specify a unit, so I'll go with Celsius.\n\nFor tomorrow's date, the current date is 2024-09-30, so tomorrow would be 2024-10-01. Again, the location is San Francisco, and the unit is the same as before, Celsius. I need to make sure the date is in the correct format: Year-Month-Day.\n\nWait, the user might be in a time zone where the current date is different, but since the current date is provided as 2024-09-30, I should use that to calculate tomorrow's date. So adding one day to 2024-09-30 gives 2024-10-01.\n\nI need to make two separate function calls. First, call get_current_temperature with San Francisco. Then, call get_temperature_date with San Francisco and the date 2024-10-01. Both times, the unit is Celsius unless specified otherwise, which it isn't here.\n\nDouble-checking the parameters: location is required for both functions. The date is only required for get_temperature_date. The unit is optional in both. So everything looks good. Time to structure the tool calls accordingly.\n</think>\n\n",
            "refusal": "None",
            "role": "assistant",
            "annotations": "None",
            "audio": "None",
            "function_call": "None",
            "tool_calls": [
              {
                "id": "chatcmpl-tool-4f4be2b6da904661913a3c9e660d023c",
                "function": {
                  "arguments": "{\"location\": \"San Francisco, California, USA\"}",
                  "name": "get_current_temperature"
                },
                "type": "function"
              },
              {
                "id": "chatcmpl-tool-4c961ea76206449b98d559a6d85297cb",
                "function": {
                  "arguments": "{\"location\": \"San Francisco, California, USA\", \"date\": \"2024-10-01\", \"unit\": \"celsius\"}",
                  "name": "get_temperature_date"
                },
                "type": "function"
              }
            ],
            "reasoning_content": "None"
          }
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 79,
          "function_name": "main",
          "code": "text(\"## Call tools\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Call tools",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 104,
          "function_name": "add_tool_results",
          "code": "def add_tool_results(messages):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 105,
          "function_name": "add_tool_results",
          "code": "if tool_calls := messages[-1].get(\"tool_calls\", None):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 106,
          "function_name": "add_tool_results",
          "code": "for tool_call in tool_calls:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 107,
          "function_name": "add_tool_results",
          "code": "call_id: str = tool_call[\"id\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 108,
          "function_name": "add_tool_results",
          "code": "if fn_call := tool_call.get(\"function\"):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 109,
          "function_name": "add_tool_results",
          "code": "fn_name: str = fn_call[\"name\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 110,
          "function_name": "add_tool_results",
          "code": "fn_args: dict = json.loads(fn_call[\"arguments\"])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 157,
          "function_name": "get_function_by_name",
          "code": "def get_function_by_name(name):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 158,
          "function_name": "get_function_by_name",
          "code": "if name == \"get_current_temperature\":"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 159,
          "function_name": "get_function_by_name",
          "code": "return get_current_temperature"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 121,
          "function_name": "get_current_temperature",
          "code": "def get_current_temperature(location: str, unit: str = \"celsius\"):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 132,
          "function_name": "get_current_temperature",
          "code": "\"temperature\": 26.1,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 133,
          "function_name": "get_current_temperature",
          "code": "\"location\": location,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 134,
          "function_name": "get_current_temperature",
          "code": "\"unit\": unit,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 131,
          "function_name": "get_current_temperature",
          "code": "return {"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 114,
          "function_name": "add_tool_results",
          "code": "messages.append({"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 115,
          "function_name": "add_tool_results",
          "code": "\"role\": \"tool\","
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 116,
          "function_name": "add_tool_results",
          "code": "\"content\": fn_res,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 117,
          "function_name": "add_tool_results",
          "code": "\"tool_call_id\": call_id,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 114,
          "function_name": "add_tool_results",
          "code": "messages.append({"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 106,
          "function_name": "add_tool_results",
          "code": "for tool_call in tool_calls:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 107,
          "function_name": "add_tool_results",
          "code": "call_id: str = tool_call[\"id\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 108,
          "function_name": "add_tool_results",
          "code": "if fn_call := tool_call.get(\"function\"):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 109,
          "function_name": "add_tool_results",
          "code": "fn_name: str = fn_call[\"name\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 110,
          "function_name": "add_tool_results",
          "code": "fn_args: dict = json.loads(fn_call[\"arguments\"])"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 157,
          "function_name": "get_function_by_name",
          "code": "def get_function_by_name(name):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 158,
          "function_name": "get_function_by_name",
          "code": "if name == \"get_current_temperature\":"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 160,
          "function_name": "get_function_by_name",
          "code": "if name == \"get_temperature_date\":"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 161,
          "function_name": "get_function_by_name",
          "code": "return get_temperature_date"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 138,
          "function_name": "get_temperature_date",
          "code": "def get_temperature_date(location: str, date: str, unit: str = \"celsius\"):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 150,
          "function_name": "get_temperature_date",
          "code": "\"temperature\": 25.9,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 151,
          "function_name": "get_temperature_date",
          "code": "\"location\": location,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 152,
          "function_name": "get_temperature_date",
          "code": "\"date\": date,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 153,
          "function_name": "get_temperature_date",
          "code": "\"unit\": unit,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 149,
          "function_name": "get_temperature_date",
          "code": "return {"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 112,
          "function_name": "add_tool_results",
          "code": "fn_res: str = json.dumps(get_function_by_name(fn_name)(**fn_args))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 114,
          "function_name": "add_tool_results",
          "code": "messages.append({"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 115,
          "function_name": "add_tool_results",
          "code": "\"role\": \"tool\","
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 116,
          "function_name": "add_tool_results",
          "code": "\"content\": fn_res,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 117,
          "function_name": "add_tool_results",
          "code": "\"tool_call_id\": call_id,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 114,
          "function_name": "add_tool_results",
          "code": "messages.append({"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 106,
          "function_name": "add_tool_results",
          "code": "for tool_call in tool_calls:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 119,
          "function_name": "add_tool_results",
          "code": "return messages"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 81,
          "function_name": "main",
          "code": "messages = add_tool_results(messages) # @inspect messages"
        }
      ],
      "env": {
        "messages": [
          {
            "role": "user",
            "content": "What's the temperature in San Francisco now? How about tomorrow? Current Date: 2024-09-30."
          },
          {
            "content": "<think>\nOkay, let's tackle this user query. The user is asking for the temperature in San Francisco now and tomorrow. The current date given is 2024-09-30.\n\nFirst, I need to figure out which functions to use. The tools provided are get_current_temperature and get_temperature_date. The first part of the question is about the current temperature, so that's get_current_temperature. The second part is about tomorrow's temperature, which would be the get_temperature_date function since it requires a date.\n\nFor the current temperature, the location is San Francisco. The function requires the location parameter, and the unit is optional, defaulting to Celsius. The user didn't specify a unit, so I'll go with Celsius.\n\nFor tomorrow's date, the current date is 2024-09-30, so tomorrow would be 2024-10-01. Again, the location is San Francisco, and the unit is the same as before, Celsius. I need to make sure the date is in the correct format: Year-Month-Day.\n\nWait, the user might be in a time zone where the current date is different, but since the current date is provided as 2024-09-30, I should use that to calculate tomorrow's date. So adding one day to 2024-09-30 gives 2024-10-01.\n\nI need to make two separate function calls. First, call get_current_temperature with San Francisco. Then, call get_temperature_date with San Francisco and the date 2024-10-01. Both times, the unit is Celsius unless specified otherwise, which it isn't here.\n\nDouble-checking the parameters: location is required for both functions. The date is only required for get_temperature_date. The unit is optional in both. So everything looks good. Time to structure the tool calls accordingly.\n</think>\n\n",
            "refusal": "None",
            "role": "assistant",
            "annotations": "None",
            "audio": "None",
            "function_call": "None",
            "tool_calls": [
              {
                "id": "chatcmpl-tool-4f4be2b6da904661913a3c9e660d023c",
                "function": {
                  "arguments": "{\"location\": \"San Francisco, California, USA\"}",
                  "name": "get_current_temperature"
                },
                "type": "function"
              },
              {
                "id": "chatcmpl-tool-4c961ea76206449b98d559a6d85297cb",
                "function": {
                  "arguments": "{\"location\": \"San Francisco, California, USA\", \"date\": \"2024-10-01\", \"unit\": \"celsius\"}",
                  "name": "get_temperature_date"
                },
                "type": "function"
              }
            ],
            "reasoning_content": "None"
          },
          {
            "role": "tool",
            "content": "{\"temperature\": 26.1, \"location\": \"San Francisco, California, USA\", \"unit\": \"celsius\"}",
            "tool_call_id": "chatcmpl-tool-4f4be2b6da904661913a3c9e660d023c"
          },
          {
            "role": "tool",
            "content": "{\"temperature\": 25.9, \"location\": \"San Francisco, California, USA\", \"date\": \"2024-10-01\", \"unit\": \"celsius\"}",
            "tool_call_id": "chatcmpl-tool-4c961ea76206449b98d559a6d85297cb"
          }
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 83,
          "function_name": "main",
          "code": "text(\"## Call client with tool call results\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "## Call client with tool call results",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 91,
          "function_name": "call_client",
          "code": "def call_client(client, messages, tools):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 92,
          "function_name": "call_client",
          "code": "return client.chat.completions.create("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 93,
          "function_name": "call_client",
          "code": "model=client.models.list().data[0].id,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 94,
          "function_name": "call_client",
          "code": "messages=messages,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 95,
          "function_name": "call_client",
          "code": "tools=tools,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 96,
          "function_name": "call_client",
          "code": "temperature=0.7,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 97,
          "function_name": "call_client",
          "code": "top_p=0.8,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 98,
          "function_name": "call_client",
          "code": "max_tokens=512,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 100,
          "function_name": "call_client",
          "code": "\"repetition_penalty\": 1.05,"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 99,
          "function_name": "call_client",
          "code": "extra_body={"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        },
        {
          "path": "tool_call_example.py",
          "line_number": 92,
          "function_name": "call_client",
          "code": "return client.chat.completions.create("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 85,
          "function_name": "main",
          "code": "response = call_client(client, messages, TOOLS)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 87,
          "function_name": "main",
          "code": "result = response.choices[0].message.content # @inspect result"
        }
      ],
      "env": {
        "result": "<think>\nOkay, let me process the user's query and the tool responses. The user asked for the current temperature in San Francisco and tomorrow's temperature. The current date provided was 2024-09-30, so tomorrow is 2024-10-01.\n\nFirst, I called get_current_temperature for San Francisco. The response came back as 26.1\u00b0C. Then, I used get_temperature_date with the date 2024-10-01 and got 25.9\u00b0C. \n\nNow, I need to present both answers clearly. The user might be planning activities or just curious about the weather. They didn't specify a unit, but since the default is Celsius, I'll stick with that. I should mention both the current and tomorrow's temperatures, making sure to note the dates. Let me check if there's any additional info needed, but the responses seem sufficient. Alright, time to format the answer.\n</think>\n\nThe current temperature in San Francisco, California, USA is **26.1\u00b0C**. \n\nTomorrow (2024-10-01), the temperature in San Francisco is expected to be **25.9\u00b0C**."
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "tool_call_example.py",
          "line_number": 89,
          "function_name": "main",
          "code": "print(result)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    }
  ]
}